from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.filters import Command, CommandStart

from config_db.users_db import UsersSQL
from core.keyboards.main_menu import main_menu_kb, admin_menu_kb
from core.keyboards.special import spec_kb
from core.filters.is_admin import IsAdmin

from core.config_data.config import Config, load_config


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router: Router = Router()

coins_dict: dict[int, dict[str, str | int | bool]] = {}
questionnaire_dict: dict[int, dict[str, str | int | bool]] = {}

class FSMCoins(StatesGroup):
    user_name = State()
    coins = State()

class FSMQuestionnaire(StatesGroup):
    user_name = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config: Config = load_config()


@router.message(F.text == '–ê–¥–º–∏–Ω–∫–∞ üõë', IsAdmin(config.admin.admin_id))
async def admin_file(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, '–•–æ–∑—è–∏–Ω –≤–µ—Ä–Ω—É–ª—Å—è!!!', reply_markup=admin_menu_kb)

@router.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É üìÉ', IsAdmin(config.admin.admin_id))
async def show_questionary(message: Message, bot: Bot, state: FSMContext):
    await bot.send_message(message.from_user.id, 'User name(–ù–∏–∫ –±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∫–µ—Ç—É –∫–æ—Ç–æ—Ä–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:')
    await state.set_state(FSMQuestionnaire.user_name)

@router.message(StateFilter(FSMQuestionnaire.user_name))
async def show_questionary_step_two(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(user_name=message.text)
    questionnaire_dict[message.from_user.id] = await state.get_data()
    await bot.send_message(message.from_user.id, f'–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n'
                         f'<b>user_id:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][0]}\n'
                         f'<b>uer_name:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][1]}\n'
                         f'<b>–ò–º—è:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][2]}\n'
                         f'<b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][3]}\n'
                         f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][4]}\n'
                         f'<b>–ú–æ–Ω–µ—Ç—ã:</b> {UsersSQL().admin_user_info(questionnaire_dict.get(message.from_user.id).get("user_name"))[0][5]}\n',
                         reply_markup=admin_menu_kb,
                         )


@router.message(F.text == '–î–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã ü§ë', IsAdmin(config.admin.admin_id))
async def add_coins_step_one(message: Message, bot: Bot, state: FSMContext):
    await bot.send_message(message.from_user.id, 'User name(–ù–∏–∫ –±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –º–æ–Ω–µ—Ç—ã –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMCoins.user_name)

@router.message(StateFilter(FSMCoins.user_name))
async def add_coins_step_two(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(user_name=message.text)
    await bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å –º–∏–Ω—É—Å–æ–º, —Ç–æ —É–±–∞–≤–∏—Ç—å?')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(FSMCoins.coins)

@router.message(StateFilter(FSMCoins.coins), F.text.isdigit())
async def add_coins_step_three(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(coins=message.text)
    coins_dict[message.from_user.id] = await state.get_data()
    wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
    await bot.send_message(message.from_user.id, f'{coins_dict.get(message.from_user.id).get("user_name")}, {wallet}, {coins_dict.get(message.from_user.id).get("coins")}', reply_markup=admin_menu_kb)
    UsersSQL().admin_change_coins(user_name=coins_dict.get(message.from_user.id).get("user_name"), wallet=int(wallet),
                                  coins=int(coins_dict.get(message.from_user.id).get("coins")))
    await bot.send_message(message.from_user.id, '–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=admin_menu_kb)
    await state.clear()
