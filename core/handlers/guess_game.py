from aiogram import Bot, Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

import random

from core.keyboards.games_menu_kb import bot_game_kb
from config_db.users_db import UsersSQL


router: Router = Router()

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_dict: dict[int, dict[int, int]] = {}

class FSMNumber(StatesGroup):
    my_number = State()
    number_1 = State()
    number_2 = State()
    number_3 = State()
    number_4 = State()
    number_5 = State()
    number_6 = State()
    number_7 = State()
    number_8 = State()
    number_9 = State()
    number_10 = State()
    number_11 = State()
    number_12 = State()
    number_13 = State()


# –ò–≥—Ä–∞ –≤ –£–≥–∞–¥–∞–π–∫—É (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∞–Ω–∫–µ—Ç–µ)
@router.message(F.text == "–£–≥–∞–¥–∞–π–∫–∞! ‚ùì‚ùì‚ùì")
async def start_game(message: Message, bot: Bot, state: FSMContext):
    my_number = int(random.randint(1, 1000))
    await state.update_data(my_number=my_number)
    user_dict[message.from_user.id] = await state.get_data()
    m_num = user_dict.get(message.from_user.id).get("my_number")
    await bot.send_message(message.from_user.id, f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000. –£ —Ç–µ–±—è 13 –ø–æ–ø—ã—Ç–æ–∫ —É–≥–∞–¥–∞—Ç—å –µ–≥–æ. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:')
    await state.set_state(FSMNumber.number_1)



@router.message(StateFilter(FSMNumber.number_1), F.text.isdigit())
async def turn_2(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_1=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_1")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 12 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_2)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 12 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_2)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 100
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 100 –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç üí∞. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?', reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_2), F.text.isdigit())
async def turn_3(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_2=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_2")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 11 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_3)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 11 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_3)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 95
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 95 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?', reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_3), F.text.isdigit())
async def turn_4(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_3=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_3")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 10 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_4)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 10 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_4)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 86
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 86 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()


@router.message(StateFilter(FSMNumber.number_4), F.text.isdigit())
async def turn_5(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_4=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_4")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 9 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_5)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 9 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_5)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 77
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 77 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_5), F.text.isdigit())
async def turn_6(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_5=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_5")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 8 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_6)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 8 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_6)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 69
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 69 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_6), F.text.isdigit())
async def turn_7(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_6=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_6")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 7 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_7)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 7 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_7)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 63
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 63 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_7), F.text.isdigit())
async def turn_8(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_7=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_7")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 6 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_8)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 6 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_8)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 55
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 55 –º–æ–Ω–µ—Ç üí∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_8), F.text.isdigit())
async def turn_9(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_8=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_8")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_9)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMNumber.number_9)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 46
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 46 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_9), F.text.isdigit())
async def turn_10(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_9=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_9")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 4 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_10)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 4 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_10)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 39
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 39 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_10), F.text.isdigit())
async def turn_11(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_10=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_10")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 3 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_11)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 3 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_11)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 33
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 33 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_11), F.text.isdigit())
async def turn_12(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_11=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_11")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_12)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏')
        await state.set_state(FSMNumber.number_12)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 24
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 24 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_12), F.text.isdigit())
async def turn_13(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_12=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_12")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) > int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–∞—Å—å <b>–ø–æ—Å–ª–µ–¥–Ω—è—è</b> –ø–æ–ø—ã—Ç–∫–∞')
        await state.set_state(FSMNumber.number_13)
    elif int(m_n) < int(num):
        await bot.send_message(message.from_user.id, '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–∞—Å—å <b>–ø–æ—Å–ª–µ–¥–Ω—è—è</b> –ø–æ–ø—ã—Ç–∫–∞')
        await state.set_state(FSMNumber.number_13)
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 15
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 15 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()

@router.message(StateFilter(FSMNumber.number_13), F.text.isdigit())
async def turn_21(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(number_13=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    num = user_dict.get(message.from_user.id).get("number_13")
    m_n = user_dict.get(message.from_user.id).get("my_number")
    if int(m_n) != int(num):
        await bot.send_message(message.from_user.id, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—à—å –º–æ–Ω–µ—Ç—ã üí∏, –õ—É–∑–µ—Ä!!! –•–æ—á–µ—à—å –æ–±–ª–∞–∂–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑?', reply_markup=bot_game_kb)
        await state.clear()
    else:
        bounty = int(UsersSQL().coins_count(message.from_user.id)[0][0]) + 10
        UsersSQL().change_coins(message.from_user.id, int(bounty))
        wallet = UsersSQL().coins_count(message.from_user.id)[0][0]
        await bot.send_message(message.from_user.id, f'–£–≥–∞–¥–∞–ª! –¢—ã –≤—ã–π–≥—Ä–∞–ª 10 –º–æ–Ω–µ—Ç üíµ. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {wallet} –º–æ–Ω–µ—Ç. –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                             reply_markup=bot_game_kb)
        await state.clear()
